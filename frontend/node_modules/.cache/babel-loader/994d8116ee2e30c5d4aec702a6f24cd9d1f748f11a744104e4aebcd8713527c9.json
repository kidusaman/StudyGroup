{"ast":null,"code":"var _jsxFileName = \"/Users/kidusamanuel/Desktop/school project/frontend/src/Chat.js\",\n  _s = $RefreshSig$();\n// src/Chat.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ConversationSelector from './ConversationSelector';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  user,\n  token,\n  socket\n}) {\n  _s();\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  // Fetch messages for the selected conversation\n  useEffect(() => {\n    if (!selectedConversation) return;\n    axios.get(`http://localhost:5001/api/private-messages/${selectedConversation}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(\"Fetched messages for conversation:\", res.data);\n      setMessages(res.data);\n    }).catch(err => console.error(\"Error fetching messages:\", err));\n  }, [selectedConversation, token]);\n\n  // Listen for incoming messages that belong to the selected conversation\n  useEffect(() => {\n    socket.on(\"receivePrivateMessage\", messageData => {\n      console.log(\"DEBUG: Received private message:\", messageData);\n      // Check if this message is between the logged-in user and the selected conversation partner\n      if (messageData.sender_id.toString() === (selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation.toString()) && messageData.recipient_id.toString() === user.id.toString() || messageData.sender_id.toString() === user.id.toString() && messageData.recipient_id.toString() === (selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation.toString())) {\n        setMessages(prevMessages => [...prevMessages, messageData]);\n      }\n    });\n    return () => {\n      socket.off(\"receivePrivateMessage\");\n    };\n  }, [socket, selectedConversation, user.id]);\n  const handleSendMessage = () => {\n    if (!selectedConversation || !newMessage.trim()) return;\n    const messagePayload = {\n      senderId: user.id,\n      recipientId: selectedConversation,\n      message: newMessage.trim()\n    };\n    console.log(\"Sending message:\", messagePayload);\n    socket.emit(\"sendPrivateMessage\", messagePayload);\n\n    // Optimistic update: show the message immediately\n    setMessages(prev => [...prev, {\n      ...messagePayload,\n      username: user.username,\n      created_at: new Date().toISOString(),\n      is_read: false\n    }]);\n    setNewMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Private Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConversationSelector, {\n      token: token,\n      onSelect: setSelectedConversation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Conversation with User \", selectedConversation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          padding: '10px',\n          height: '300px',\n          overflowY: 'auto',\n          marginBottom: '15px'\n        },\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '10px',\n            padding: '8px',\n            borderRadius: '5px',\n            backgroundColor: msg.sender_id === user.id ? '#e0ffe0' : '#f0f0f0',\n            color: '#333' // <-- Add this to ensure dark text\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.username || (msg.sender_id === user.id ? user.username : 'User')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), \": \", msg.message, /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '0.8em',\n              color: '#555'\n            },\n            children: new Date(msg.created_at).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Type your message\",\n          style: {\n            width: '80%',\n            padding: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          style: {\n            marginLeft: '10px',\n            padding: '10px 20px'\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a conversation to view messages.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"UfM9K7qwHzdZEHwN7+ySke0uOPo=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","axios","ConversationSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","user","token","socket","_s","selectedConversation","setSelectedConversation","messages","setMessages","newMessage","setNewMessage","get","headers","Authorization","then","res","console","log","data","catch","err","error","on","messageData","sender_id","toString","recipient_id","id","prevMessages","off","handleSendMessage","trim","messagePayload","senderId","recipientId","message","emit","prev","username","created_at","Date","toISOString","is_read","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","style","border","padding","height","overflowY","marginBottom","map","msg","idx","borderRadius","backgroundColor","color","fontSize","toLocaleTimeString","type","value","onChange","e","target","placeholder","width","onClick","marginLeft","_c","$RefreshReg$"],"sources":["/Users/kidusamanuel/Desktop/school project/frontend/src/Chat.js"],"sourcesContent":["// src/Chat.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ConversationSelector from './ConversationSelector';\n\nfunction Chat({ user, token, socket }) {\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  // Fetch messages for the selected conversation\n  useEffect(() => {\n    if (!selectedConversation) return;\n    axios.get(`http://localhost:5001/api/private-messages/${selectedConversation}`, {\n      headers: { Authorization: `Bearer ${token}` }\n    })\n    .then((res) => {\n      console.log(\"Fetched messages for conversation:\", res.data);\n      setMessages(res.data);\n    })\n    .catch((err) => console.error(\"Error fetching messages:\", err));\n  }, [selectedConversation, token]);\n\n  // Listen for incoming messages that belong to the selected conversation\n  useEffect(() => {\n    socket.on(\"receivePrivateMessage\", (messageData) => {\n      console.log(\"DEBUG: Received private message:\", messageData);\n      // Check if this message is between the logged-in user and the selected conversation partner\n      if (\n        (messageData.sender_id.toString() === selectedConversation?.toString() &&\n         messageData.recipient_id.toString() === user.id.toString()) ||\n        (messageData.sender_id.toString() === user.id.toString() &&\n         messageData.recipient_id.toString() === selectedConversation?.toString())\n      ) {\n        setMessages((prevMessages) => [...prevMessages, messageData]);\n      }\n    });\n    return () => {\n      socket.off(\"receivePrivateMessage\");\n    };\n  }, [socket, selectedConversation, user.id]);\n\n  const handleSendMessage = () => {\n    if (!selectedConversation || !newMessage.trim()) return;\n\n    const messagePayload = {\n      senderId: user.id,\n      recipientId: selectedConversation,\n      message: newMessage.trim()\n    };\n\n    console.log(\"Sending message:\", messagePayload);\n    socket.emit(\"sendPrivateMessage\", messagePayload);\n\n    // Optimistic update: show the message immediately\n    setMessages((prev) => [\n      ...prev,\n      {\n        ...messagePayload,\n        username: user.username,\n        created_at: new Date().toISOString(),\n        is_read: false\n      }\n    ]);\n    setNewMessage('');\n  };\n\n  return (\n    <div>\n      <h2>Private Chat</h2>\n      {/* Conversation Selector */}\n      <ConversationSelector token={token} onSelect={setSelectedConversation} />\n\n      {selectedConversation ? (\n        <>\n          <h3>Conversation with User {selectedConversation}</h3>\n          <div \n            style={{ \n              border: '1px solid #ccc', \n              padding: '10px', \n              height: '300px', \n              overflowY: 'auto',\n              marginBottom: '15px' \n            }}\n          >\n            {messages.map((msg, idx) => (\n              <div \n                key={idx} \n                style={{ \n                  marginBottom: '10px', \n                  padding: '8px', \n                  borderRadius: '5px', \n                  backgroundColor: msg.sender_id === user.id ? '#e0ffe0' : '#f0f0f0',\n                  color: '#333' // <-- Add this to ensure dark text\n                }}\n              >\n                <strong>{msg.username || (msg.sender_id === user.id ? user.username : 'User')}</strong>: {msg.message}\n                <div style={{ fontSize: '0.8em', color: '#555' }}>\n                  {new Date(msg.created_at).toLocaleTimeString()}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div>\n            <input \n              type=\"text\" \n              value={newMessage} \n              onChange={(e) => setNewMessage(e.target.value)} \n              placeholder=\"Type your message\" \n              style={{ width: '80%', padding: '10px' }}\n            />\n            <button onClick={handleSendMessage} style={{ marginLeft: '10px', padding: '10px 20px' }}>\n              Send\n            </button>\n          </div>\n        </>\n      ) : (\n        <p>Please select a conversation to view messages.</p>\n      )}\n    </div>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}